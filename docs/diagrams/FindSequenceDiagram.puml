@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":FindCommandParser" as FindCommandParser LOGIC_COLOR
participant "p:ClientMatchesPredicate" as ClientMatchesPredicate LOGIC_COLOR
participant "f:FindCommand" as FindCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("find alex 9223")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("find alex 9223")
activate AddressBookParser

create FindCommandParser
AddressBookParser -> FindCommandParser
activate FindCommandParser

FindCommandParser --> AddressBookParser
deactivate FindCommandParser

AddressBookParser -> FindCommandParser : parse("alex 9223")
activate FindCommandParser

note right
Tokenizes keywords ["alex", "9223"]
Creates a single ClientMatchesPredicate
that checks if ANY keyword appears in
Name, Phone, or Email (case-insensitive, partial)
end note

create ClientMatchesPredicate
FindCommandParser -> ClientMatchesPredicate : new ClientMatchesPredicate(keywords)
activate ClientMatchesPredicate
ClientMatchesPredicate --> FindCommandParser : p
deactivate ClientMatchesPredicate

create FindCommand
FindCommandParser -> FindCommand : new FindCommand(p)
activate FindCommand
FindCommand --> FindCommandParser
deactivate FindCommand

FindCommandParser --> AddressBookParser : f
deactivate FindCommandParser
FindCommandParser -[hidden]-> AddressBookParser
destroy FindCommandParser

AddressBookParser --> LogicManager : f
deactivate AddressBookParser

LogicManager -> FindCommand : execute(m)
activate FindCommand

FindCommand -> Model : updateFilteredPersonList(p)
activate Model

note right of Model
Model filters clients using p.test(Person),
returning all whose name, phone,
or email contains "alex" or "9223".
end note

Model --> FindCommand
deactivate Model

create CommandResult
FindCommand -> CommandResult
activate CommandResult
CommandResult --> FindCommand
deactivate CommandResult

FindCommand --> LogicManager : r
deactivate FindCommand

[<-- LogicManager
deactivate LogicManager
@enduml
@startuml
!include style.puml
skinparam ArrowFontStyle plain

box Logic LOGIC_COLOR_T1
participant ":LogicManager" as LogicManager LOGIC_COLOR
participant ":AddressBookParser" as AddressBookParser LOGIC_COLOR
participant ":FindCommandParser" as FindCommandParser LOGIC_COLOR
participant "p:ClientMatchesPredicate" as ClientMatchesPredicate LOGIC_COLOR
participant "f:FindCommand" as FindCommand LOGIC_COLOR
participant "r:CommandResult" as CommandResult LOGIC_COLOR
end box

box Model MODEL_COLOR_T1
participant "m:Model" as Model MODEL_COLOR
end box

[-> LogicManager : execute("find alex 9223")
activate LogicManager

LogicManager -> AddressBookParser : parseCommand("find alex 9223")
activate AddressBookParser

create FindCommandParser
AddressBookParser -> FindCommandParser
activate FindCommandParser

FindCommandParser --> AddressBookParser
deactivate FindCommandParser

AddressBookParser -> FindCommandParser : parse("alex 9223")
activate FindCommandParser

note right
Tokenizes keywords ["alex", "9223"]
Creates a single ClientMatchesPredicate
that checks if ANY keyword appears in
Name, Phone, or Email (case-insensitive, partial)
end note

create ClientMatchesPredicate
FindCommandParser -> ClientMatchesPredicate : new ClientMatchesPredicate(keywords)
activate ClientMatchesPredicate
ClientMatchesPredicate --> FindCommandParser : p
deactivate ClientMatchesPredicate

create FindCommand
FindCommandParser -> FindCommand : new FindCommand(p)
activate FindCommand
FindCommand --> FindCommandParser
deactivate FindCommand

FindCommandParser --> AddressBookParser : f
deactivate FindCommandParser
FindCommandParser -[hidden]-> AddressBookParser
destroy FindCommandParser

AddressBookParser --> LogicManager : f
deactivate AddressBookParser

LogicManager -> FindCommand : execute(m)
activate FindCommand

FindCommand -> Model : updateFilteredPersonList(p)
activate Model

note right of Model
Model filters clients using p.test(Person),
returning all whose name, phone,
or email contains "alex" or "9223".
end note

Model --> FindCommand
deactivate Model

create CommandResult
FindCommand -> CommandResult
activate CommandResult
CommandResult --> FindCommand
deactivate CommandResult

FindCommand --> LogicManager : r
deactivate FindCommand

[<-- LogicManager
deactivate LogicManager
@enduml
